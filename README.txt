(ENG)

Coming soon! All comments in code already written on English.

(TODO: Translate README to English)




(RUS)

"Virtual Bots Processor" - это пакет функций и всего необходимого чтобы делать простые симуляции с использованием самописного ИИ. На самом деле это должен был быть движок, но дело до этого не дошло.
В этом пакете есть функции для полезной математики, функции для взаимодействия с ботами (ещё не все), и функции для генерации примитивного логического окружения (их недостаточно).

==============================================================================

VBP включает в себя:

types/types.c - особые типы данных используемые пакетом функций.

smath/smath.c - немного полезной математики, которая позволяет упрощать работу с некоторыми функциями.

bots.c - так называемая база. Содержит функции для работы с роботами.
bots_consts.c - содержит в себе практически все необходимые константы.

logic/plans.c - функции, генерирующие планы для каждого бота.
logic/interpreter.c - интерпретирует планы каждого бота.
logic/thinking.c (НЕ СОЗДАН) - определяет какой план бот будет использовать, и направляет бота ближе к главной цели.

map/builder/mapbuilder.c (НЕ ГОТОВ) - позволяет создать простую карту коллизий, и раставлять ботов или укрытия вручную.
map/sheets - папка предназначена для хранения уже готовых массивов уровней. (её пока-что нет)

каждый неописанный файл/папка не используется напрямую.

==============================================================================

Компиляция:

Используется стандарт C99.

Пока-что я не смог нормально его скомпилировать...
(TODO : сделать так чтобы оно скомпилировалось на GCC, а потом пояснить как.)

==============================================================================

Принципы работы ИИ:

Боты действуют по сборнику листов планов (bot.plan[#1][#2][#3]), где:

    1. № Листа
    2. № Строки
    3. Ячейка данных.

Ячеек данных в каждой строке исключительно 3, где 0-ая ячейка содержит команду, а 1-ая и 2-ая содержат данные для исполнения команды.

Все команды описаны в logic/interpreter.c и в logic/plans/plans.c .

Для референса используется прототип написанный на Pascal. Он уже готов к компиляции (references)

